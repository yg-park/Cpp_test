	<5장 - 함수와 참조, 복사 생성자>
인자 전달 방식

call by value
64bit 내 데이터(함수의 결과값) 전달
값 자체를 stack을 이용해서 전달한다

call by reference 
64bit 이상 데이터는 (계산된 값이 저장된)주소를 전달한다
swap(pointer), sort 함수 등
& * 이용해서 value를 주소로 바꿔준다

외부 프로그램 참조

객체 치환
동일한 클래스 타입의 객체끼리 치환
모든 데이터가 비트 단위로 복사
char da[10] = {"hello"}; (o)
da = "hello"; c에서 불가능, c++에서 가능

객체리턴

참조변수(별명)
주소를 나타냄
주소증감도 가능

참조에 의한 호출
매개변수를 참조 타입으로 하고 보통 변수처럼 사용
계산된 결과와 return된 값의 자료형이 같아야한다
예)(1+2+3+4)/4=2.5 but return 2 > int 형 아닌 double, float 등으로 변환
c++은 참조변수를 통해 return된다 
(예제 5-5 int& avg)

얕은 복사
객체 복사 시 틀만 복사
문자열은 안가져가고 위치는 가져감
깊은복사
완전한 형태의 복사

복사생성자
한 클래스에 오직 한개만 선언 가능

디폴트 복사 생성자
자동으로 삽입

	<6장 - 함수 중복과 static 멤버>
/*
cs(code segment) - 명령
ds(data segment) 변수
es heap(down), static(up)
ss extern(외부)

랜드플래시 속도빠르게 블럭단위로
블럭단위 메모리 : 512바이트씩
*/
함수중복 실패
리턴 타입이 다르고 받는 매개변수가 같으면 중복에 실패

소멸자 중복 불가

디폴트 매개변수 
이미 초기화된 매개변수는 생략해도 디폴트로 입력되지만
정해지지 않은 경우 반드시 정해줘야한다

함수 중복의 모호성

static
프로그램이 시작할 때 생성
in class, 모든 클래스 인스턴스들이 공유하는 멤버

non-static
객체가 생성될 때 생성

	<7장 - 프렌드와 연산자 중복>
c++ 프렌드
클래스의 멤버 함수가 아닌 외부 함수
1. 전역 함수
2. 다른 클래스의 특정 멤버 함수
3. 다른 클래스의 전체
소스파일을 알 수 없을 때

연산자, 함수 재정의 : 오버라이딩
정수, 문자열, 색, 배열을 합칠 수 있다

연산자 함수
1. 클래스의 멤버함수로 구현
2. 외부함수로 구현하고 클래스에 프렌드함수로 선언